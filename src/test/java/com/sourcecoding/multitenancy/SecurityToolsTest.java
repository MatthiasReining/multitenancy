package com.sourcecoding.multitenancy;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import junit.framework.Assert;

import org.junit.Test;

public class SecurityToolsTest {

	@Test
	public void type() throws Exception {
		assertThat(SecurityTools.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		// TODO auto-generated by JUnit Helper.
		SecurityTools target = new SecurityTools() {
		};
		assertThat(target, notNullValue());
	}

	@Test
	public void shouldCheckPasswordWithRightPW() throws Exception {
		String pw = "geheim";
		String hash = SecurityTools.createHash(pw);

		Assert.assertTrue(SecurityTools.checkPassword(pw, hash));
	}

	@Test
	public void shouldCheckPasswordWithWrongPW() throws Exception {
		String pw = "geheim";
		String hash = SecurityTools.createHash("wrong-password");

		Assert.assertFalse(SecurityTools.checkPassword(pw, hash));
	}

	@Test
	public void shouldCheckPasswordWithNullValues() throws Exception {
		String pw = "geheim";
		String hash = SecurityTools.createHash(pw);

		Assert.assertFalse(SecurityTools.checkPassword(pw, null));
		Assert.assertFalse(SecurityTools.checkPassword(null, hash));
		Assert.assertFalse(SecurityTools.checkPassword(null, null));
	}

	@Test
	public void shouldCheckPasswordWithWrongHash() throws Exception {
		String pw = "geheim";
		String hash = "nicht-korrekter-hash"; // to short

		Assert.assertFalse(SecurityTools.checkPassword(pw, hash));
	}

	@Test
	public void shouldRunMain() throws Exception {
		SecurityTools.main("geheim");
	}

	@Test
	public void shouldCreateHash() throws Exception {
		String password = "geheim";
		// 100 iterations makes cloudbees to slow (55min unit test duration)
		int duration = 2;
		for (int i = 0; i < duration; i++) {
			String actual = SecurityTools.createHash(password);
			Assert.assertEquals(38, actual.length());
		}
	}

	@Test
	public void shouldCreateHashByLongPassword() throws Exception {
		String password = "Ã–Â€ÃŒg}Ã�ÃžÃ°NbÃ¯Ã¾ZGÂ¦X;!Ã¬Ã…Â„,CÂ²Ã…ilÂ»ÃºÃ˜Ã¥ÃŽQ7gÃ�Âš,Â¸Ã¬Â¾Â›Â£Ã²>Ã€mÂ”!9TÃ¥(Ã˜2~Â¯Ã•&Ã–Â“RÃ·Â¨Ã¹xÂ…Â²Âº`Â¿Ã¶:G,Ã–ÃŽÃšÃ‰Ã f#/SÃš`=Â¾Â�Â˜Ã¾ÂµÃœÂ™Ã·Â¦a<ÃŽÃ™ÂšÂ�<MÂ�:MQoÃ”~Ã£lÂ¥Ã˜tÃ”ZÃ¸Âƒ4Â©o<Â¡Ã¶CvÂœÂŒÂšÃœÂŠ.ÂŸ]jXÃŒu=#Ã˜ÂŸÂªgÃ´1Ã�Â¥Â¬AÃ„$ÃƒÂ€jÂŒÃ½+(9Â¥sryÃ”Ã¾ÂµÂ‚gÂ¬ÃµÂ»Â ÂµcÃŽÃ•BÃ ?%uÂ¡Â…;a?Â¥JÂ°r9pÃ‚]Â˜ÃŸVÃ³[Ã½ÂœÂ§6DÃ•Ã‰fÂ¹Ã�j`Ã¦hÃ—Â¤TÂ“Vn?uÂ‚mUÃ¡Ã´]ÃžÃ�Ã¹Â³>Ã²ÃŽ2Ã”Ã®n/Ã­Ã¥VÃ¶fÂ±Â¬Â¬Â�Â¦Ã–Â­aLuÂ¦#Â°Ã¶EÃ�$uÃµÃ§0oÂ»EÂ¾Â¥Â�Â‡ÃƒÃ‡Â›Ã½iÃƒÃ©Ã‡Ã§\"Â”Ã�o>Â™Ã†Ã�Â…Ã£OcÃ�Ã¤";
		String actual = SecurityTools.createHash(password);
		Assert.assertEquals(38, actual.length());
	}

	@Test
	public void shouldNeverCreateTheSameHash() throws Exception {
		String password = "geheim";
		String actual = SecurityTools.createHash(password);
		String expected = SecurityTools.createHash(password);
		Assert.assertNotSame(expected, actual);
	}

	@Test(expected = RuntimeException.class)
	public void shouldCreateHashAndThrowException() throws Exception {
		String password = null;
		SecurityTools.createHash(password);
	}

}
